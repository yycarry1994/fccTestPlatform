"""
Django settings for fccTestPlatform project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import datetime
from pathlib import Path
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 将子应用所属目录（apps）加入到Python的模块搜索路径中
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'a7m9zvsb-2qca%8y0g5!2nfg+_7uu4kz*3ww)5ry-m9%2lx)mk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'projects.apps.ProjectsConfig',
    'users.apps.UsersConfig',
    'interfaces.apps.InterfacesConfig',
    'rest_framework',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fccTestPlatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fccTestPlatform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysqltest',
        'HOST': '172.25.17.134',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': '123456',

    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


REST_FRAMEWORK = {
    # a.定义解析器类，用于解析不通的前端参数类型
    # b.会自动根据请求头中Content-Type来解析参数
    # c.无论前端传递这三种参数中的哪一种参数，都可以使用request.data去获取
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    # a.定义渲染类，用于返回不同类型的数据
    # b.会自动根据请求头中Accept进行渲染
    # c.如果前端不指定Accept，那么默认返回json格式的数据
    # d.如果指定Accept为application/json，那么也会以json数据返回
    # e.如果指定Accept为text/html（浏览器发起GET请求会自动指定），那么会以html形式返回
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    # 'DEFAULT_FILTER_BACKENDS': [
    #     'rest_framework.filters.SearchFilter',
    #     'rest_framework.filters.OrderingFilter'
    # ],
    # 'SEARCH_PARAM': 'search',
    # 指定用于支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # a.必须得指定分页引擎
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPagination',
    # b.必须指定每一页显示多少条数据
    'PAGE_SIZE': 3,

    # 指定认证方式（列表的认证机制是有顺序的）
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 指定JWTtoken认证方式
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # a.session认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    # 往往不在全局指定、一般在对应的类视图中指定
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     # 'rest_framework.permissions.AllowAny',
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
}

# 专门重写JWT的全局配置信息
JWT_AUTH = {
    # 指定自定义项目返回的处理结果函数
    # 'JWT_RESPONSE_PAYLOAD_HANDLER':
    #     'rest_framework_jwt.utils.jwt_response_payload_handler',
    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'utils.handle_jwt_response.jwt_response_payload_handler',
    # 设置token有效时长
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 设置前端创建token时， 请求头值的前缀，默认为’JWT’
    # 格式： Authorization: JWT 具体的token值（中间必须要有空格）
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}


AUTH_USER_MODEL = 'users.UserModel'

